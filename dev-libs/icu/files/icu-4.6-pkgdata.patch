https://bugs.gentoo.org/show_bug.cgi?id=326021
https://ssl.icu-project.org/trac/ticket/8281
https://ssl.icu-project.org/trac/changeset/29332
https://ssl.icu-project.org/trac/changeset/29333

--- tools/pkgdata/pkgdata.cpp
+++ tools/pkgdata/pkgdata.cpp
@@ -1,5 +1,5 @@
 /******************************************************************************
- *   Copyright (C) 2000-2010, International Business Machines
+ *   Copyright (C) 2000-2011, International Business Machines
  *   Corporation and others.  All Rights Reserved.
  *******************************************************************************
  *   file name:  pkgdata.c
@@ -99,6 +99,7 @@
 
 #define LARGE_BUFFER_MAX_SIZE 2048
 #define SMALL_BUFFER_MAX_SIZE 512
+#define BUFFER_PADDING_SIZE 20
 
 static void loadLists(UPKGOptions *o, UErrorCode *status);
 
@@ -484,9 +485,8 @@
 
     if (!specialHandling) {
 #if defined(USING_CYGWIN) || defined(OS400)
-#define CMD_PADDING_SIZE 20
-        if ((len + CMD_PADDING_SIZE) >= SMALL_BUFFER_MAX_SIZE) {
-            cmd = (char *)uprv_malloc(len + CMD_PADDING_SIZE);
+        if ((len + BUFFER_PADDING_SIZE) >= SMALL_BUFFER_MAX_SIZE) {
+            cmd = (char *)uprv_malloc(len + BUFFER_PADDING_SIZE);
         } else {
             cmd = cmdBuffer;
         }
@@ -1133,6 +1133,7 @@
     int32_t result = 0;
     char *cmd = NULL;
     UBool freeCmd = FALSE;
+    int32_t length = 0;
 
     /* This is necessary because if packaging is done without assembly code, objectFile might be extremely large
      * containing many object files and so the calling function should supply a command buffer that is large
@@ -1140,15 +1141,18 @@
      */
     if (command != NULL) {
         cmd = command;
-    } else {
-        if ((cmd = (char *)uprv_malloc(sizeof(char) * LARGE_BUFFER_MAX_SIZE)) == NULL) {
-            fprintf(stderr, "Unable to allocate memory for command.\n");
-            return -1;
-        }
-        freeCmd = TRUE;
     }
 
     if (mode == MODE_STATIC) {
+        if (cmd == NULL) {
+            length = uprv_strlen(pkgDataFlags[AR]) + uprv_strlen(pkgDataFlags[ARFLAGS]) + uprv_strlen(targetDir) +
+                     uprv_strlen(libFileNames[LIB_FILE_VERSION]) + uprv_strlen(objectFile) + uprv_strlen(pkgDataFlags[RANLIB]) + BUFFER_PADDING_SIZE;
+            if ((cmd = (char *)uprv_malloc(sizeof(char) * length)) == NULL) {
+                fprintf(stderr, "Unable to allocate memory for command.\n");
+                return -1;
+            }
+            freeCmd = TRUE;
+        }
         sprintf(cmd, "%s %s %s%s %s",
                 pkgDataFlags[AR],
                 pkgDataFlags[ARFLAGS],
@@ -1166,6 +1170,21 @@
             result = runCommand(cmd);
         }
     } else /* if (mode == MODE_DLL) */ {
+        if (cmd == NULL) {
+            length = uprv_strlen(pkgDataFlags[GENLIB]) + uprv_strlen(pkgDataFlags[LDICUDTFLAGS]) +
+                     uprv_strlen(targetDir) + uprv_strlen(libFileNames[LIB_FILE_VERSION_TMP]) +
+                     uprv_strlen(objectFile) + uprv_strlen(pkgDataFlags[LD_SONAME]) +
+                     uprv_strlen(pkgDataFlags[LD_SONAME][0] == 0 ? "" : libFileNames[LIB_FILE_VERSION_MAJOR]) +
+                     uprv_strlen(pkgDataFlags[RPATH_FLAGS]) + uprv_strlen(pkgDataFlags[BIR_FLAGS]) + BUFFER_PADDING_SIZE;
+#ifdef U_CYGWIN
+            length += uprv_strlen(targetDir) + uprv_strlen(libFileNames[LIB_FILE_CYGWIN_VERSION]);
+#endif
+            if ((cmd = (char *)uprv_malloc(sizeof(char) * length)) == NULL) {
+                fprintf(stderr, "Unable to allocate memory for command.\n");
+                return -1;
+            }
+            freeCmd = TRUE;
+        }
 #ifdef U_CYGWIN
         sprintf(cmd, "%s%s%s %s -o %s%s %s %s%s %s %s",
                 pkgDataFlags[GENLIB],
@@ -1209,7 +1228,7 @@
     tempObjectFile[uprv_strlen(tempObjectFile)-1] = 'o';
 
     length = uprv_strlen(pkgDataFlags[COMPILER]) + uprv_strlen(pkgDataFlags[LIBFLAGS])
-                    + uprv_strlen(tempObjectFile) + uprv_strlen(gencFilePath) + 10;
+                    + uprv_strlen(tempObjectFile) + uprv_strlen(gencFilePath) + BUFFER_PADDING_SIZE;
 
     cmd = (char *)uprv_malloc(sizeof(char) * length);
     if (cmd == NULL) {
