#!/bin/bash 

# TODO: - add outer loop to iterate through multiple source dirs
#	- ask to remove files / add to excdlude list
#	- fix false positives

debug()
{
	[[ -n ${DEBUG} ]] && echo "$*"
}

echo_red() {
	echo -e "\033[1;31m$*\033[0m"
}

echo_green() {
	echo -e "\033[1;32m$*\033[0m"
}

echo_yellow() {
	echo -e "\033[1;33m$*\033[0m"
}

SOURCE_DIR="/usr/portage"
PATCH_DIR="doc/patches"

PACKAGE_LIST_FILE="doc/auto-sync/portage_tree/package_list"
PACKAGE_EXCLUDE_IN_OVERLAY_FILE="doc/auto-sync/portage_tree/exclude_in_overlay"
PACKAGE_EXCLUDE_IN_SOURCE_DIR_FILE="doc/auto-sync/portage_tree/exclude_in_source_dir"

PACKAGE_LIST="$(cat ${PACKAGE_LIST_FILE} | sed "s/#.*//")"
[[ -n ${DEBUG} ]] && echo ${PACKAGE_LIST}

EXCLUDES=""
for EXCLUDE in $(cat ${PACKAGE_EXCLUDE_IN_OVERLAY_FILE} | sed "s/#.*//"); do
	if [[ -f ${EXCLUDE} ]]; then
		[[ "${DEBUG}" > "1" ]] && echo "exclude_in_overlay: excluding ${EXCLUDE}"
		EXCLUDES+="-not -wholename ${EXCLUDE} "
	else
		echo_red "exclude_in_overlay: ${EXCLUDE} is not in the overlay"
	fi
done

for EXCLUDE in $(cat ${PACKAGE_EXCLUDE_IN_SOURCE_DIR_FILE} | sed "s/#.*//"); do
	if [[ -f ${SOURCE_DIR}/${EXCLUDE} ]]; then
		[[ "${DEBUG}" > "1" ]] && echo "exclude_in_source_dir: excluding ${EXCLUDE}"
		EXCLUDES+="-not -wholename ${EXCLUDE} "
		if [[ -f ${EXCLUDE} ]]; then
			echo_red "exclude_in_source_dir: ${EXCLUDE} is in the overlay and in source_dir"
		fi
	else
		echo_red "exclude_in_source_dir: ${EXCLUDE} is not in the source_dir"
	fi
done



for PACKAGE in ${PACKAGE_LIST}; do
	while [[ "${PACKAGE}" != "" ]]; do
		echo_yellow "\nworking on:\t\t${PACKAGE}"
		EBUILDS=""
		ASK=""
		CLEAN_FILES=""
		for I in . ${SOURCE_DIR}; do
			pushd ${I} >/dev/null
			if [[ -d ${PACKAGE} ]]; then
				EBUILDS+="$(find ${PACKAGE} -name "*.ebuild" ${EXCLUDES}) "
			else
				echo "${PACKAGE} is not in ${I}"
				ASK+="1"
			fi
			popd >/dev/null
		done
		EBUILDS="$(echo ${EBUILDS} | sed "s/[[:space:]]\+/\n/g" | sort -u)"
		[[ -n ${DEBUG} ]] && echo -e  "EBUILDS: ${EBUILDS}"
		let NUM_EBUILDS=0
		let NUM_PATCHED_EBUILDS=0
		MISSING_EBUILD_PATCHES=""
		APPLIED_EBUILD_PATCHES=""
		for EBUILD in ${EBUILDS}; do
			NUM_EBUILDS+=1
			echo_yellow "working on:\t\t${EBUILD}"
			if [[ -f ${SOURCE_DIR}/${EBUILD} ]]; then
				mkdir -p ${PACKAGE}
				cp ${SOURCE_DIR}/${EBUILD} ${EBUILD}
				if [[ -f ${PATCH_DIR}/${EBUILD}.patch ]]; then
					NUM_PATCHED_EBUILDS+=1
					patch -p1 < ${PATCH_DIR}/${EBUILD}.patch
					APPLIED_EBUILD_PATCHES+="${PATCH_DIR}/${EBUILD}.patch "
				else
					MISSING_EBUILD_PATCHES+="${PATCH_DIR}/${EBUILD}.patch "
				fi
				bin/make_multilib --no-manifest ${EBUILD} 
			else
				CLEAN_FILES="${EBUILD} ${CLEAN_FILES}"
				echo_red "${EBUILD} is not in ${SOURCE_DIR}"
				ASK+="2"
			fi
			echo_green "finished working on:\t${EBUILD}"
		done
		if [[ "$NUM_EBUILDS" != "$NUM_PATCHED_EBUILDS" ]];then
			if [[ "$NUM_PATCHED_EBUILDS" > 0 ]]; then
				echo_red "the following patches are missing: ${MISSING_EBUILD_PATCHES}"
				echo_red "if those ebuilds do not need a patch add a empty file"
				ASK+="3"
			fi
		fi
		if [[ -d ${PATCH_DIR}/${PACKAGE} ]]; then
			if [[ -n $APPLIED_EBUILD_PATCHES ]]; then
				if [[ "" == "$(cat $APPLIED_EBUILD_PATCHES)" ]]; then
					echo_red "all applied ebuild patches are empty $APPLIED_EBUILD_PATCHES"
					ASK+="4"
				fi
			fi
			AVAILABLE_EBUILD_PATCHES="$(find ${PATCH_DIR}/${PACKAGE} -name "*.patch" -or -path "${PATCH_DIR}/${PACKAGE}/files" -prune -not -path "${PATCH_DIR}/${PACKAGE}/files")"
			UNUSED_EBUILD_PATCHES="$(echo ${AVAILABLE_EBUILD_PATCHES} | sed "s/[[:space:]]\+/\n/g" | sort -u)"
			for PATCH in $APPLIED_EBUILD_PATCHES; do
				UNUSED_EBUILD_PATCHES="${UNUSED_EBUILD_PATCHES/${PATCH}/}"
			done
			for PATCH in ${UNUSED_EBUILD_PATCHES}; do
				if [[ "" == "$(grep ${PATCH/.patch/} ${PACKAGE_EXCLUDE_IN_OVERLAY_FILE})" ]]; then
					echo_red "$PATCH seems to be unneeded"
					ASK+="5"
				fi
			done
		fi
		bin/check_prep_ml_binaries.sh --no-manifest ${PACKAGE}

		FILES=""
		for I in . ${SOURCE_DIR}; do
			pushd ${I} >/dev/null
			if [[ -d ${PACKAGE}/files ]]; then
				FILES+="$(find ${PACKAGE}/files -type f ${EXCLUDES} ) "
			else
				[[ -n ${DEBUG} ]] && echo -e "no patches in ${I}"
			fi
			popd >/dev/null
		done
		FILES="$(echo ${FILES} | sed "s/[[:space:]]\+/\n/g" | sort -u)"
		[[ -n ${DEBUG} ]] && echo -e "FILES: ${FILES}"
		for FILE in ${FILES}; do
			if [[ -f ${SOURCE_DIR}/${FILE} ]]; then
				mkdir -p ${PACKAGE}/files
				cp ${SOURCE_DIR}/${FILE} ${FILE}
			else
				echo_red "${FILE} is not in ${SOURCE_DIR}"
				CLEAN_FILES="${CLEAN_FILES} ${FILE}"
				ASK+="6"
			fi
		done
		if [[ -d ${PATCH_DIR}/${PACKAGE}/files ]]; then
			cat ${PATCH_DIR}/${PACKAGE}/files/* | patch -p1
		fi
		echo_green "finished working on:\t${PACKAGE}\n"
		UNNEEDED_FILES="$(find ${PACKAGE} -name "*.orig" -o -name "*.rej" -o -name "ChangeLog" -o -name "metadata.xml" )"
		if [[ "" != "${ASK}" || "" != "${UNNEEDED_FILES}" || "" != "$(git status | grep ${PACKAGE})" || "" != "${CLEAN_FILES}" ]]; then
			debug "ASK: ${ASK} UNNEEDED_FILES ${UNNEEDED_FILES} git $(git status | grep ${PACKAGE})"
			cat ${SOURCE_DIR}/${PACKAGE}/Manifest >> ${PACKAGE}/Manifest
			for UNNEEDED in ${UNNEEDED_FILES}; do
				rm -f ${UNNEEDED} 2> /dev/null
				git rm ${UNNEEDED} 2> /dev/null
			done
			ebuild ${EBUILD} manifest
			egencache --update --repo=multilib ${PACKAGE}
			while true; do
				echo "d:show diff e:show eix c:commit s:skip a:sync again r:remove unneeded ebuild" 
				read INPUT
				case $INPUT in
					d)
						git diff ${PACKAGE} | colordiff | less
						;;
					e)
						eix -e ${PACKAGE}
						;;
					c)
						git add ${PACKAGE}
						if [[ -d ${PATCH_DIR}/${PACKAGE} ]]; then
							git add ${PATCH_DIR}/${PACKAGE}
						fi
						git commit -m "synced ${PACKAGE} via auto-sync"
						PACKAGE=""
						break
						;;
					s)
						git checkout ${PACKAGE}
						egencache --update --repo=multilib ${PACKAGE}
						PACKAGE=""
						break
						;;
					a)
						break
						;;
					r)
						git rm ${CLEAN_FILES}
						ebuild ${EBUILD} manifest
						git add ${PACKAGE}
						git commit -m "removed outdated ebuilds of ${PACKAGE} via auto-sync"
						break
						;;
				esac
			done
		else
			PACKAGE=""
		fi
	done
done

