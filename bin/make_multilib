#!/bin/bash

echo_red() {
	echo -e "\033[1;31m$*\033[0m"
}

check() {
	local PYTHON_WORKAROUND="s/emake python//g ; t end;" # python ebuild is calling emake in src_configure
	if [[ "" != "$(sed -n "/\(_\|^\)src_unpack/,/^\}/ { s/epatch\|\<sed\|eautoconf/foo/g ; T end; p; :end d}" $1)" ]];then
		echo_red "$1 contains epatch sed or eautoconf in src_unpack"
	fi
	if [[ "" != "$(sed -n "/src_configure/,/^\}/ { ${PYTHON_WORKAROUND} s/emake/foo/g ; T end; p; :end d}" $1)" ]];then
		echo_red "$1 contains emake in src_configure"
	fi
	if [[ "" != "$(sed -n "/src_compile/,/^\}/ { s/\<econf/foo/g ; T end; p; :end d}" $1)" ]];then
		echo_red "$1 contains econf in src_compile"
	fi
}

make_multilib() {
	sed -i "s/\(src_\(unpack\|prepare\|compile\|configure\|install\)\) \{0,1\}\((\)/multilib-native_\1_internal\3/" $1
	sed -i "s/\(pkg_\(setup\|preinst\|postinst\|postrm\)\) \{0,1\}\((\)/multilib-native_\1_internal\3/" $1
	bash bin/add_lib32_usedeps $1
	NEED_EAPI2=""
	for eclass in $(grep "^inherit" $1 | cut -d " " -f 2-);
	do
		if [[ -f eclass/${eclass}.eclass ]]; then		
			if [[ "" != "$(grep lib32? eclass/${eclass}.eclass)" ]]; then
				NEED_EAPI2=1
			fi
		fi
	done
	if [[ "" != "$(grep lib32? $1)" ]]; then
		NEED_EAPI2=1
	fi
	if [[ -n $NEED_EAPI2 ]]; then
		check $1
		if [[ "" == "$(grep EAPI $1)" ]]; then
			sed -i "/^# \\\$Header/ { 
				N
				a \
				EAPI=\"2\"\n
			}" $1
		else
			sed -i "/^EAPI/ { s/\(=\"\?\)\(0\|1\)\(\"\?\)/\12\3/ }" $1
		fi
	fi
	if [[ "" == "$(grep inherit $1)" ]]; then
		sed -i "/^EAPI/ {
			a \
			\\\ninherit multilib-native
		}" $1
		if [[ "" == "$(grep inherit $1)" ]]; then
			sed -i "/^# \$Header/ {
				a \
				\\\ninherit multilib-native
			}" $1
		fi
	else
		sed -i "/^inherit / { /multilib-native/ b; s/$/ multilib-native/ }" $1
	fi
}

if [[ "$1" == "--no-manifest" ]];then
	make_multilib $2
else
	make_multilib $1
	ebuild $1 manifest
fi


